{
  "designerVersion" : "1.8.40",
  "id" : "pbSelect",
  "name" : "Select",
  "lastUpdate" : 1556764054995,
  "template" : "<div ng-class=\"{\n    'form-horizontal': properties.labelPosition === 'left' && !properties.labelHidden,\n    'row': properties.labelPosition === 'top' && !properties.labelHidden || properties.labelHidden\n    }\">\n    <div class=\"form-group\">\n        <label\n            ng-if=\"!properties.labelHidden\"\n            ng-class=\"{ 'control-label--required': properties.required }\"\n            class=\"control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 12 }}\">\n            {{ properties.label | uiTranslate }}\n        </label>\n        <div class=\"col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 0) }}\" >\n            <select\n                class=\"form-control\"\n                name=\"{{ctrl.name}}\"\n                ng-model=\"properties.value\"\n                ng-model-options=\"{ allowInvalid: true }\"\n                ng-options=\"ctrl.getValue(option) as (ctrl.getLabel(option) | uiTranslate) for option in properties.availableValues\"\n                ng-required=\"properties.required\"\n                ng-disabled=\"properties.disabled\">\n                <option style=\"display:none\" value=\"\">\n                    {{ properties.placeholder | uiTranslate }}\n                </option>\n            </select>\n            <div ng-messages=\"$form[ctrl.name].$dirty && $form[ctrl.name].$error \" ng-messages-include=\"forms-generic-errors.html\" role=\"alert\"></div>\n        </div>\n    </div>\n</div>\n",
  "icon" : "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><g><path fill='#fff' d='M36.8,6.6L35.3,8l4.2,4.2l1.4,1.4l1.4-1.4L46.7,8l-1.4-1.4L41,10.8L36.8,6.6z M0,0v20h50V0H0z M1,19V1h31 v18H1z M33,1h16v18H33V1z'/><path fill='#CBD5E1' d='M36.8,6.6L35.3,8l4.2,4.2l1.4,1.4l1.4-1.4L46.7,8l-1.4-1.4L41,10.8L36.8,6.6z M0,0v20h50V0H0z M1,19V1h31 v18H1z M33,1h16v18H33V1z'/></g></svg>",
  "controller" : "function PbSelectCtrl($scope, $parse, $log, widgetNameFactory, $timeout, $window, $element) {\n  var ctrl = this;\n\n  function comparator(initialValue, item) {\n    return angular.equals(initialValue, ctrl.getValue(item));\n  }\n\n  function createGetter(accessor) {\n    return accessor && $parse(accessor);\n  }\n\n  this.getLabel = createGetter($scope.properties.displayedKey) || function (item) {\n    return typeof item === 'string' ? item : JSON.stringify(item);\n  };\n\n  this.getValue = createGetter($scope.properties.returnedKey) || function (item) {\n    return item;\n  };\n\n  this.findSelectedItem = function (items) {\n    return items.filter(comparator.bind(null, $scope.properties.value))\n      .map(function (item) {\n        return ctrl.getValue(item);\n      })[0];\n  };\n\n  this.setSelectedValue = function (foundItem) {\n    $timeout(function () {\n        $scope.properties.value = angular.isDefined(foundItem) ? foundItem : null ;\n    }, 0);\n  };\n\n  $scope.$watchCollection('properties.availableValues', function(items) {\n    if (Array.isArray(items)) {\n      var foundItem = ctrl.findSelectedItem(items);\n\n      //force IE9 to rerender option list\n      if ($window.navigator && $window.navigator.userAgent && $window.navigator.userAgent.indexOf('MSIE 9') >= 0) {\n        var option = document.createElement('option');\n        var select = $element.find('select')[0];\n        select.add(option,null);\n        select.remove(select.options.length-1);\n      }\n\n      // terrible hack to force the select ui to show the correct options\n      // so we change it's value to undefined and then delay to the correct value\n      $scope.properties.value = undefined;\n      ctrl.setSelectedValue(foundItem);\n    }\n  });\n\n  $scope.$watch('properties.value', function(value) {\n    if (angular.isDefined(value) && value !== null) {\n      var items = $scope.properties.availableValues;\n      if (Array.isArray(items)) {\n        var foundItem = ctrl.findSelectedItem(items);\n        ctrl.setSelectedValue(foundItem);\n      }\n    }\n  });\n\n  this.name = widgetNameFactory.getName('pbSelect');\n\n  if (!$scope.properties.isBound('value')) {\n    $log.error('the pbSelect property named \"value\" need to be bound to a variable');\n  }\n}\n",
  "description" : "Dropdown list of available values. The user selects one value",
  "custom" : false,
  "order" : 5,
  "properties" : [ {
    "label" : "Disabled",
    "name" : "disabled",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "expression"
  }, {
    "label" : "Required",
    "name" : "required",
    "help" : "In the context of a form container, use $form.$invalid as a Boolean to check form validity in a widget property",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "expression"
  }, {
    "label" : "Label hidden",
    "name" : "labelHidden",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "constant"
  }, {
    "label" : "Label",
    "name" : "label",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "text",
    "defaultValue" : "Select",
    "bond" : "interpolation"
  }, {
    "label" : "Label position",
    "name" : "labelPosition",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "choice",
    "defaultValue" : "top",
    "choiceValues" : [ "left", "top" ],
    "bond" : "constant"
  }, {
    "label" : "Label width",
    "name" : "labelWidth",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "integer",
    "defaultValue" : 4,
    "bond" : "constant",
    "constraints" : {
      "min" : "1",
      "max" : "12"
    }
  }, {
    "label" : "Placeholder",
    "name" : "placeholder",
    "help" : "Short hint that describes the expected value",
    "type" : "text",
    "defaultValue" : "Select an option",
    "bond" : "interpolation"
  }, {
    "label" : "Available values",
    "name" : "availableValues",
    "help" : "Can be a list of objects. Use 'Displayed key' to refine suggestions and 'Returned key' to refine selection",
    "type" : "collection",
    "bond" : "expression"
  }, {
    "label" : "Displayed key",
    "name" : "displayedKey",
    "help" : "Object key to display",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Returned key",
    "name" : "returnedKey",
    "caption" : "Value must be unique",
    "help" : "The name of the key to use as value. Leave it empty for whole object",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Value",
    "name" : "value",
    "caption" : "Any variable: <i>myData</i> or <i>myData.attribute</i>",
    "help" : "Read-write binding, initialized or updated by users' input (bi-directional bond)",
    "type" : "text",
    "bond" : "variable"
  } ],
  "assets" : [ ],
  "requiredModules" : [ ],
  "type" : "widget",
  "hasHelp" : false
}