{
  "designerVersion" : "1.7.49",
  "id" : "customCameraCapture",
  "name" : "cameraCapture",
  "lastUpdate" : 1541752145591,
  "template" : "<span ng-if=\"environment\"><identicon name=\"{{environment.component.id}}\" size=\"30\" background-color=\"[255,255,255, 0]\" foreground-color=\"[51,51,51]\"></identicon> {{environment.component.name}}</span>\n\n<div class=\"alert alert-error ng-scope\" ng-show=\"webcamError\" style=\"\">\n    <span>Webcam could not be started. Did you give access to it?</span>\n</div>\n<div>\n    <button class=\"btn btn-primary\" ng-click='isShow=!isShow;properties.snapshotData=null;'><i class=\"glyphicon glyphicon-camera\"></i> {{properties.label}}</button>\n</div>\n<br/>\n\n<div ng-if='isShow' class=\"Modal-overlay\">\n    <center>\n        <webcam channel=\"channel\" \n            on-streaming=\"onSuccess()\" \n            on-error=\"onError(err)\" \n            on-stream=\"onStream(stream)\">\n        </webcam>\n        <button class=\"btn btn-primary\" ng-click=\"makeSnapshot()\"><i class=\"glyphicon glyphicon-camera\"></i> Capture</button>\n    </center>\n</div>\n<div>\n    <canvas id=\"snapshot\" height='300' width='300'></canvas>\n</div>",
  "controller" : "function($scope) {\n    var _video = null,\n        patData = null;\n    \n    $scope.isShow = false;\n    $scope.patOpts = {x: 0, y: 0, w: 25, h: 25};\n\n    // Setup a channel to receive a video property\n    // with a reference to the video element\n    // See the HTML binding in main.html\n    $scope.channel = {};\n\n    $scope.webcamError = false;\n    $scope.onError = function (err) {\n        $scope.$apply(\n            function() {\n                $scope.webcamError = err;\n            }\n        );\n    };\n\n    $scope.onSuccess = function () {\n        // The video element contains the captured camera data\n        _video = $scope.channel.video;\n        $scope.$apply(function() {\n            $scope.patOpts.w = _video.width;\n            $scope.patOpts.h = _video.height;\n            \n            //$scope.showDemos = true;\n        });\n    };\n\n    $scope.onStream = function (stream) {\n        // You could do something manually with the stream.\n    };\n\n\t$scope.makeSnapshot = function() {\n        if (_video) {\n            var patCanvas = document.querySelector('#snapshot');\n            if (!patCanvas) return;\n\n            patCanvas.width = _video.width;\n            patCanvas.height = _video.height;\n            \n            var ctxPat = patCanvas.getContext('2d');\n\n            var idata = getVideoData($scope.patOpts.x, $scope.patOpts.y, $scope.patOpts.w, $scope.patOpts.h);\n            ctxPat.putImageData(idata, 0, 0);\n\n            sendSnapshotToServer(patCanvas.toDataURL());\n\n            patData = idata;\n            \n            $scope.properties.snapshotData = $scope.snapshotData.toString();\n            $scope.isShow = false;\n\n        }\n    };\n    \n    /**\n     * Redirect the browser to the URL given.\n     * Used to download the image by passing a dataURL string\n     */\n    $scope.downloadSnapshot = function downloadSnapshot() {\n        var download = $scope.properties.snapshotData.toString().replace(/^data:image\\/[^;]+/, 'data:application/octet-stream');\n        window.location.href=download;\n\n    };\n    \n    var getVideoData = function getVideoData(x, y, w, h) {\n        var hiddenCanvas = document.createElement('canvas');\n        hiddenCanvas.width = _video.width;\n        hiddenCanvas.height = _video.height;\n        var ctx = hiddenCanvas.getContext('2d');\n        ctx.drawImage(_video, 0, 0, _video.width, _video.height);\n        return ctx.getImageData(x, y, w, h);\n    };\n\n    /**\n     * This function could be used to send the image data\n     * to a backend server that expects base64 encoded images.\n     *\n     * In this example, we simply store it in the scope for display.\n     */\n    var sendSnapshotToServer = function sendSnapshotToServer(imgBase64) {\n        $scope.snapshotData = imgBase64;\n    };\n}",
  "custom" : true,
  "properties" : [ {
    "label" : "Label",
    "name" : "label",
    "type" : "text",
    "defaultValue" : "Take Picture",
    "bond" : "constant"
  }, {
    "label" : "Snapshot Data",
    "name" : "snapshotData",
    "type" : "text",
    "bond" : "variable"
  } ],
  "assets" : [ {
    "id" : "e28bb08b-a99a-4595-a1bd-3e23c9f159fc",
    "name" : "modal.css",
    "type" : "css",
    "order" : 2,
    "external" : false
  }, {
    "id" : "71e86db5-73cf-495b-a1dd-a41762860a14",
    "name" : "webcam.min.js",
    "type" : "js",
    "order" : 1,
    "external" : false
  } ],
  "requiredModules" : [ "webcam" ],
  "type" : "widget",
  "hasHelp" : false
}