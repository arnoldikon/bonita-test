{
  "designerVersion" : "1.8.40",
  "id" : "pbChecklist",
  "name" : "Checklist",
  "lastUpdate" : 1556764054976,
  "template" : "<div class=\"row form-group\" ng-class=\"{ 'form-horizontal':  !properties.labelHidden && properties.labelPosition === 'left' }\">\n    <label\n            ng-if=\"!properties.labelHidden\"\n            class=\"control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 12 }}\">\n        {{ properties.label | uiTranslate }}\n    </label>\n\n    <div ng-if=\"properties.inline\" class=\"col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 0) }}\">\n        <label class=\"checkbox-inline\" ng-repeat=\"choice in properties.availableValues track by $index\">\n            <input\n                    type=\"checkbox\"\n                    name=\"{{ctrl.name}}\"\n                    ng-model=\"ctrl.selectedItems[$index]\"\n                    ng-change=\"ctrl.updateValues()\"\n                    ng-disabled=\"properties.disabled\">\n            {{ (ctrl.getLabel(choice) || choice) | uiTranslate }}\n        </label>\n    </div>\n\n    <div ng-if=\"!properties.inline\" class=\"col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 0) }}\">\n        <div ng-if=\"!properties.inline\" class=\"checkbox\" ng-repeat=\"choice in properties.availableValues track by $index\">\n            <label>\n                <input\n                        type=\"checkbox\"\n                        name=\"{{ctrl.name}}\"\n                        ng-model=\"ctrl.selectedItems[$index]\"\n                        ng-change=\"ctrl.updateValues()\"\n                        ng-disabled=\"properties.disabled\">\n                {{ (ctrl.getLabel(choice) || choice) | uiTranslate }}\n            </label>\n        </div>\n    </div>\n</div>\n",
  "icon" : "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><path fill='#fff' d='M20 12.9l1.1 1.1-3.3 3-1.8-2 .1-.8 1.6 1.2 2.3-2.5zM14 11h9v8h-9v-8zm1 7h7v-6h-7v6zm6.1-14L20 2.9l-2.3 2.5-1.6-1.2-.1.8 1.7 2 3.4-3zM23 1v8h-9V1h9zm-1 1h-7v6h7V2z'/><path fill='#CBD5E1' d='M33 6h-7V3h7v3zm10-3h-7v3h7V3zm-5 10H26v3h12v-3zm7 0h-4v3h4v-3z'/></svg>",
  "controller" : "function PbChecklistCtrl($scope, $parse, widgetNameFactory, $log) {\n\n  'use strict';\n  var ctrl = this;\n\n  /**\n   * Watch the data source and set wrapChoices and $scope.properties.selectedValues\n   */\n  function comparator(item, initialValue) {\n    return angular.equals(item, initialValue);\n  }\n\n  function createGetter(accessor) {\n    return accessor && $parse(accessor);\n  }\n\n  this.getLabel = createGetter($scope.properties.displayedKey) || function (item) {\n      return typeof item === 'string' ? item : JSON.stringify(item);\n    };\n\n  this.getValue = createGetter($scope.properties.returnedKey) || function (item) {\n      return item;\n    };\n\n\n  /**\n   * update the scope.properties.selectedValues with the selected items\n   */\n  this.updateValues = function () {\n    $scope.properties.selectedValues = ctrl.selectedItems\n      .map(function (checked, index) {\n        if (checked !== true) {\n          return false;\n        }\n        var item = $scope.properties.availableValues[index];\n        return ctrl.getValue(item);\n      }).filter(function (item) {\n        return item !== false;\n      });\n  };\n\n  function updateSelectedValues() {\n    ctrl.selectedItems = ($scope.properties.availableValues || []).map(function (item) {\n      if (Array.isArray($scope.properties.selectedValues)) {\n        return $scope.properties.selectedValues.some(comparator.bind(null, ctrl.getValue(item)));\n      }\n      return false;\n    });\n  }\n\n  $scope.$watchCollection('properties.availableValues', updateSelectedValues);\n  $scope.$watchCollection('properties.selectedValues', updateSelectedValues);\n\n  this.name = widgetNameFactory.getName('pbChecklist');\n\n  if (!$scope.properties.isBound('selectedValues')) {\n    $log.error('the pbCheckList property named \"selectedValues\" need to be bound to a variable');\n  }\n}\n",
  "description" : "Set of checkboxes for options. The user selects zero or more",
  "custom" : false,
  "order" : 7,
  "properties" : [ {
    "label" : "Disabled",
    "name" : "disabled",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "expression"
  }, {
    "label" : "Inline",
    "name" : "inline",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "constant"
  }, {
    "label" : "Label hidden",
    "name" : "labelHidden",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "constant"
  }, {
    "label" : "Label",
    "name" : "label",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "text",
    "defaultValue" : "Default label",
    "bond" : "interpolation"
  }, {
    "label" : "Label position",
    "name" : "labelPosition",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "choice",
    "defaultValue" : "top",
    "choiceValues" : [ "left", "top" ],
    "bond" : "constant"
  }, {
    "label" : "Label width",
    "name" : "labelWidth",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "integer",
    "defaultValue" : 4,
    "bond" : "constant",
    "constraints" : {
      "min" : "1",
      "max" : "12"
    }
  }, {
    "label" : "Available values",
    "name" : "availableValues",
    "caption" : "Comma-separated list or bound an array data",
    "help" : "Can be a list of objects. Use 'Displayed key' to refine options and 'Returned key' to refine selections",
    "type" : "collection",
    "defaultValue" : [ "green", "red", "blue" ],
    "bond" : "expression"
  }, {
    "label" : "Displayed key",
    "name" : "displayedKey",
    "help" : "The name of the key to use as label. Can be empty",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Returned key",
    "name" : "returnedKey",
    "caption" : "Value must be unique",
    "help" : "The name of the key to use as value. Leave it empty for whole object",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Selected values",
    "name" : "selectedValues",
    "type" : "text",
    "bond" : "variable"
  } ],
  "assets" : [ ],
  "requiredModules" : [ ],
  "type" : "widget",
  "hasHelp" : false
}