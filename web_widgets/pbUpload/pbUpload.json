{
  "designerVersion" : "1.8.40",
  "id" : "pbUpload",
  "name" : "Upload",
  "lastUpdate" : 1556764054864,
  "template" : "<div ng-class=\"{\n    'form-horizontal': properties.labelPosition === 'left' && !properties.labelHidden,\n    'row': properties.labelPosition === 'top' && !properties.labelHidden || properties.labelHidden\n    }\">\n    <div class=\"form-group\">\n        <label\n            ng-if=\"!properties.labelHidden\"\n            ng-class=\"{ 'control-label--required': properties.required }\"\n            class=\"control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 12 }}\">\n            {{ properties.label | uiTranslate }}\n        </label>\n        <div class=\"col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 0) }}\">\n           <form action=\"{{ctrl.url}}\"\n                 ng-upload=\"ctrl.uploadComplete(content)\"\n                 ng-upload-loading=\"ctrl.startUploading()\"\n                 error-catcher=\"ctrl.uploadError(error)\"\n                 upload-options-enable-csrf\n                 upload-options-csrf-param=\"CSRFToken\">\n                <div class=\"input-group file-upload\">\n                    <input type=\"text\" ng-focus=\"ctrl.preventFocus($event)\" placeholder=\"{{properties.placeholder | uiTranslate}}\" value=\"{{ctrl.filename}}\" class=\"form-control\">\n\n                    <button type=\"button\" ng-if=\"ctrl.filemodel\" ng-click=\"ctrl.clear()\" class=\"file-upload-clear\">\n                        <i class=\"glyphicon glyphicon-remove-circle\"></i>\n                        <span class=\"hide\" translate>Close</span>\n                    </button>\n                    <span class=\"input-group-btn\">\n                        <span class=\"btn\" ng-class=\"{'btn-default disabled':$isUploading, 'btn-primary':!$isUploading}\">\n                            <input class=\"file-upload-input\"\n                                   ng-class=\"{'file-upload-input--disabled':$isUploading}\"\n                                   name=\"{{ctrl.name}}\" type=\"file\"\n                                   ng-required=\"properties.required\"\n                                   ng-model=\"ctrl.filemodel\" />\n                            <i class=\"glyphicon\" ng-class=\"{'glyphicon-cloud-upload':$isUploading, 'glyphicon-paperclip':!$isUploading}\"></i>\n                        </span>\n                    </span>\n                </div>\n            </form>\n            <div ng-messages=\"$form[ctrl.name].$dirty && $form[ctrl.name].$error \" ng-messages-include=\"forms-generic-errors.html\" role=\"alert\"></div>\n        </div>\n    </div>\n</div>\n",
  "icon" : "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><path fill='none' stroke='#fff' stroke-miterlimit='10' d='M0 0v20h50V0H0zm1 19V1h31v18H1zM33 1h16v18H33V1zm8.2 14.1l5.2-5.2c1.3-1.3.9-3.6.1-4.4-1.2-1.2-3.7-1-5 .4-1.9 1.9-5 5.1-5 5.1s-2.5 2.5-.8 4.2c1.4 1.4 4.1-1.2 4.1-1.2L45 8.7s1-1.3.2-2c-.9-.8-2.3.3-2.3.3l-3.3 3.3'/></svg>",
  "controller" : "function PbUploadCtrl($scope, $sce, $element, widgetNameFactory, $timeout, $log, gettextCatalog) {\n  var ctrl = this;\n  this.name = widgetNameFactory.getName('pbInput');\n  this.filename = '';\n  this.filemodel = '';\n\n  this.clear = clear;\n  this.startUploading = startUploading;\n  this.uploadError = uploadError;\n  this.uploadComplete = uploadComplete;\n\n  this.name = widgetNameFactory.getName('pbUpload');\n\n  this.preventFocus = function($event) {\n    $event.target.blur();\n  };\n\n  this.submitForm = function() {\n    var form = $element.find('form');\n    form.triggerHandler('submit');\n    form[0].submit();\n  };\n\n  this.forceSubmit = function(event) {\n    if(!event.target.value) {\n      return;\n    }\n    ctrl.submitForm();\n    event.target.value = null;\n  };\n\n  var input = $element.find('input');\n  input.on('change', ctrl.forceSubmit);\n  $scope.$on('$destroy', function() {\n    input.off('change', ctrl.forceSubmit);\n  });\n\n  $scope.$watch('properties.url', function(newUrl, oldUrl){\n    ctrl.url = $sce.trustAsResourceUrl(newUrl);\n    if (newUrl === undefined) {\n      $log.warn('you need to define a url for pbUpload');\n    }\n  });\n\n  //the filename displayed is not bound to the value as a bidirectionnal\n  //bond, thus, in case the value is updated, it is not reflected\n  //to the filename (example with the BS-14498)\n  //we watch the value to update the filename and the upload widget state\n  $scope.$watch(function(){return $scope.properties.value;}, function(newValue){\n    if (newValue && newValue.filename) {\n      ctrl.filemodel = true;\n      ctrl.filename = newValue.filename;\n    } else if (!angular.isDefined(newValue)) {\n      delete ctrl.filemodel;\n      delete ctrl.filename;\n    }\n  });\n\n  if (!$scope.properties.isBound('value')) {\n    $log.error('the pbUpload property named \"value\" need to be bound to a variable');\n  }\n\n  function clear() {\n    ctrl.filename = '';\n    ctrl.filemodel = '';\n    $scope.properties.value = {};\n  }\n\n  function uploadError(error) {\n    $log.warn('upload fails too', error);\n    ctrl.filemodel = '';\n    ctrl.filename = gettextCatalog.getString('Upload failed');\n  }\n\n  function startUploading() {\n    ctrl.filemodel = '';\n    ctrl.filename  = gettextCatalog.getString('Uploading...');\n  }\n\n  function uploadComplete(response) {\n    //when the upload widget return a String, it means an error has occurred (with a html document as a response)\n    //if it's not a string, we test if it contains some error message\n    if(angular.isString(response) || (response && response.type && response.message)){\n      $log.warn('upload failed');\n      ctrl.filemodel = '';\n      ctrl.filename = gettextCatalog.getString('Upload failed');\n      $scope.properties.errorContent = angular.isString(response) ? response : response.message;\n      return;\n    }\n    $scope.properties.value = response;\n  }\n}\n",
  "description" : "File chooser for uploading a document to a form",
  "custom" : false,
  "order" : 9,
  "properties" : [ {
    "label" : "Required",
    "name" : "required",
    "help" : "In the context of a form container, use $form.$invalid as a Boolean to check form validity in a widget property",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "expression"
  }, {
    "label" : "Label hidden",
    "name" : "labelHidden",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "constant"
  }, {
    "label" : "Label",
    "name" : "label",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "text",
    "defaultValue" : "Default label",
    "bond" : "interpolation"
  }, {
    "label" : "Label position",
    "name" : "labelPosition",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "choice",
    "defaultValue" : "top",
    "choiceValues" : [ "left", "top" ],
    "bond" : "constant"
  }, {
    "label" : "Label width",
    "name" : "labelWidth",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "integer",
    "defaultValue" : 4,
    "bond" : "constant",
    "constraints" : {
      "min" : "1",
      "max" : "12"
    }
  }, {
    "label" : "Placeholder",
    "name" : "placeholder",
    "help" : "Short hint that describes the expected value",
    "type" : "text",
    "bond" : "interpolation"
  }, {
    "label" : "URL",
    "name" : "url",
    "help" : "Defines endpoint URL where the file will be uploaded",
    "type" : "text",
    "defaultValue" : "../API/formFileUpload",
    "bond" : "expression"
  }, {
    "label" : "Value",
    "name" : "value",
    "caption" : "Any variable: <i>myData</i> or <i>myData.attribute</i>",
    "help" : "Holds the response from the upload endpoint. That value can be used to fulfill a contract",
    "type" : "text",
    "bond" : "variable"
  }, {
    "label" : "Error on upload holder",
    "name" : "errorContent",
    "help" : "Holds the response content from the upload error endpoint. That value can be used to guidance purpose",
    "type" : "text",
    "bond" : "variable"
  } ],
  "assets" : [ {
    "name" : "ng-upload-0.5.19-patched.min.js",
    "type" : "js",
    "order" : 1,
    "external" : false
  }, {
    "name" : "file-upload.css",
    "type" : "css",
    "order" : 1,
    "external" : false
  } ],
  "requiredModules" : [ "ngUpload" ],
  "type" : "widget",
  "hasHelp" : false
}